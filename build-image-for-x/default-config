#!/usr/bin/env bash
set -e -x

if [[ -z "$INITIALIZED" ]]; then

INITIALIZED=1

# if setup doesn't need cross platform, please comment 'CROSS_PLATFORM=yes' out.
CROSS_PLATFORM=yes

SCRIPTPATH=$(pwd)
WORKSPACE=${SCRIPTPATH}/workspace
PROJECT_NAME="Yobol"                # turn to the project name what do you want to compile
PROJECT_ROOT="$(cd "$(dirname "$0")"; pwd -P)"

# get-sources.sh
SOURCES_METHOD=local                # clone, local, tarball
SOURCES_CLONE_URL="https://github.com/ClickHouse/ClickHouse.git"
SOURCES_BRANCH="master"
SOURCES_COMMIT=HEAD                 # do checkout of this commit after clone

# prepare-toolchains.sh
COMPILER=clang                             # gcc, clang
COMPILER_INSTALL_METHOD=skip               # (packages), (sources), (skip if you install it in base image)
COMPILER_PACKAGE_VERSION=10                # version for compiler

# install-compiler-from-sources.sh
CLANG_SOURCES_BRANCH=trunk          # or tags/RELEASE_600/final
GCC_SOURCES_VERSION=latest          # or gcc-7.1.0

# install-libraries.sh
USE_LLVM_LIBRARIES_FROM_SYSTEM=0          # 0 or 1
ENABLE_EMBEDDED_COMPILER=1

# build
BUILD_METHOD=normal                 # normal, debian
BUILD_TARGETS=clickhouse            # tagtet name, all; only for "normal"
BUILD_TYPE=RelWithDebInfo           # RelWithDebInfo, Debug, ASan, TSan
CMAKE_FLAGS=""

# prepare-docker-image-ubuntu.sh
DOCKER_UBUNTU_REPO=multiarch/ubuntu-core  # https://hub.docker.com/r/multiarch/ubuntu-core/
DOCKER_UBUNTU_ARCH=arm64                  # How the architecture is named in a tarball at https://partner-images.canonical.com/core/
DOCKER_UBUNTU_VERSION=bionic              # bionic 为 Ubuntu 18.04.5 LTS 的版本代号，http://releases.ubuntu.com/18.04/
DOCKER_UBUNTU_QEMU_ARCH=aarch64           # How the architecture is named in https://www.qemu.org/
DOCKER_UBUNTU_QEMU_VERSION=v5.1.0-7       # https://github.com/multiarch/qemu-user-static/releases

THREADS=$(grep -c ^processor /proc/cpuinfo || nproc || sysctl -a | grep -F 'hw.ncpu' | grep -oE '[0-9]+')

# All scripts should return 0 in case of success, 1 in case of permanent error,
#  2 in case of temporary error, any other code in case of permanent error.
function die {
    echo ${1:-Error}
    exit ${2:1}
}

# ./install-os-packages.sh prepare

mkdir -p $WORKSPACE

fi